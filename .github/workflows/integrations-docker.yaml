name: Integrations tests (Docker)
on: push

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Build image
        run: docker build . --file Dockerfile --tag wait4it-pipeline/docker:${{ github.run_id }}
      - name: Export image as tar
        run: docker save -o wait4it.tar wait4it-pipeline/docker:${{ github.run_id }}
      - name: Cache wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}

  Redis:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: Redis Test
        run: docker compose run test-redis
      - name: TCP Test
        run: docker compose run test-tcp

  PostgreSQL:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: PostgreSQL Test
        run: docker compose run test-postgres

  PasswordFileCheck:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: Create password file
        run: echo 'postgres' > ./pg_pw.txt
      - name: Test PostgreSQL with password file
        run: docker compose run test-password-file

  MySQL:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: MySQL Test
        run: docker compose run test-mysql

  HTTP:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: HTTP Test
        run: docker compose run test-http

  MongoDB:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: MongoDB Test
        run: docker compose run test-mongodb

  RabbitMQ:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: RabbitMQ Test
        run: docker compose run test-rabbitmq

  Memcached:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: Memcached Test
        run: docker compose run test-memcached

  ElasticSearch:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: ElasticSearch Test
        run: docker compose run test-elasticsearch

  Aerospike:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: Aerospike Test
        run: docker compose run test-aerospike

  Kafka:
    runs-on: ubuntu-latest
    needs: Build
    env:
      PIPELINE_IMAGE_VERSION: ${{ github.run_id }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Retrieve wait4it
        uses: actions/cache@v3
        with:
          path: wait4it.tar
          key: wait4it-docker-${{ github.run_id }}
      - name: Load image into docker
        run: docker load --input wait4it.tar
      - name: List images
        run: docker image ls
      - name: Kafka Test
        run: docker compose run test-kafka
